[{"filePath":"/Users/kroma/Documents/scripts/git/cdk-templates/cloudfront/bin/cloudfront.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kroma/Documents/scripts/git/cdk-templates/cloudfront/lib/cloudfront-stack.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'appsync' is assigned a value but never used.","line":44,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apig' is assigned a value but never used.","line":61,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":17}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as cdk from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\n\nexport class CloudfrontStack extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const appsync_url = new cdk.CfnParameter(this, \"appsyncURL\", {\n      type: \"String\",\n      description: \"The appsync origin URL for cloud front\",\n    });\n\n    const appsync_key = new cdk.CfnParameter(this, \"appsyncKey\", {\n      type: \"String\",\n      description: \"The appsync API key\",\n    });\n\n    const api_url = new cdk.CfnParameter(this, \"apiURL\", {\n      type: \"String\",\n      description: \"The API origin URL for cloud front\"\n    });\n\n    const api_path = new cdk.CfnParameter(this, \"apiPath\", {\n      type: \"String\",\n      description: \"The API origin path for cloud front\"\n    });\n\n    const cache_policy = new cloudfront.CachePolicy(this, 'SalesPortalCachePolicy', {\n      cachePolicyName: 'sp-cachePolify',\n      comment: 'salesportal whitelisted headers',\n      headerBehavior: cloudfront.CacheHeaderBehavior.allowList(\"authorizeToken\", \"authorizetoken\"),\n      enableAcceptEncodingBrotli: true,\n      enableAcceptEncodingGzip: true\n    });\n\n    const origin_policy = new cloudfront.OriginRequestPolicy(this, 'SalesPortalOriginRequestPolicy', {\n      originRequestPolicyName: 'sp-originRequestPolicy',\n      comment: 'salesportal whitelisted headers',\n      headerBehavior: cloudfront.OriginRequestHeaderBehavior.allowList(\"authorizeToken\", \"authorizetoken\")\n    });\n\n    if (appsync_url.valueAsString !== \"\") {\n      const appsync = new cloudfront.Distribution(this, 'SalesPortalAppSyncCloudfront', {\n        defaultBehavior: {\n          origin: new origins.HttpOrigin(appsync_url.valueAsString, {\n            customHeaders: { 'x-api-key': appsync_key.valueAsString },\n            originSslProtocols: [cloudfront.OriginSslPolicy.TLS_V1, cloudfront.OriginSslPolicy.TLS_V1_1, cloudfront.OriginSslPolicy.TLS_V1_2]\n          }),\n          allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n          cachedMethods: cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS,\n          viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n          compress: true,\n          cachePolicy: cache_policy,\n          originRequestPolicy: origin_policy\n        }\n      })\n    }\n\n    if (api_url.valueAsString !== \"\") {\n      const apig = new cloudfront.Distribution(this, 'SalesPortalAPIGCloudfront', {\n        defaultBehavior: {\n          origin: new origins.HttpOrigin(api_url.valueAsString, {\n            originPath: api_path.valueAsString,\n            originSslProtocols: [cloudfront.OriginSslPolicy.TLS_V1, cloudfront.OriginSslPolicy.TLS_V1_1, cloudfront.OriginSslPolicy.TLS_V1_2],\n          }),\n          allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n          viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n          compress: true\n        }\n      })\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/kroma/Documents/scripts/git/cdk-templates/cloudfront/test/cloudfront.test.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]